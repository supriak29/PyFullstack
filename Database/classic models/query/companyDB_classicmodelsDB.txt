--------------------------------------------------------
DATE: 20/6/22
--------------------------------------------------------


mysql -h localhost -u root
---------------------------------------------------
>>>> Database: Company <<<<

show databases;
----------------------------------------------------
** creating db **

create database company;
show databases;

** select table **

use company;
show tables;

-----------------------------------------------------

** creating tables **

create table employee(
Fname varchar(15) not null,
Minit char,
Lname varchar(15) not null,
Ssn char(9) not null,
Bdate date,
Address varchar(30),
Sex char,
Salary decimal(10,2),
Super_ssn char(9),
Dno int not null,
primary key (Ssn)
);

desc employee;

create table department(
Dname varchar(15) not null,
Dnumber int not null,
Mgr_ssn char(9),
Mgr_start_date date,
primary key (Dnumber),
unique(Dname),
foreign key (Mgr_ssn) references employee(ssn)
);

desc department;

create table dept_location(
Dnumber int not null,
Dlocation varchar(15) not null,
primary key (Dnumber, Dlocation),
foreign key (Dnumber) references department(Dnumber)
);

desc dept_location;

create table project(
Pname varchar(15) not null,
Pnumber int unique not null,
Plocation varchar(15) not null,
Dnum int not null,
primary key (Pnumber),
foreign key (Dnum) references department(Dnumber)
);

show tables;
desc project;

create table works_on(
Essn char(9) not null,
Pno int not null,
Hours decimal(3,1) not null,
primary key (Essn, Pno),
foreign key (Essn) references employee(ssn),
foreign key (Pno) references Project (Pnumber)
);

show tables;
desc works_on;

create table dependent(
Essn char(9) not null,
Dependent_name varchar(15) not null, 
Sex char,
Bdate date,
Relationship varchar(8),
primary key (Essn, Dependent_name),
foreign key (Essn) references employee(Ssn)
);

show tables;
desc dependent;

--------------------------------------------------------

** inserting data into tables **


insert into employee values (
"John", 'B', 'Smith', '123456789', '1965-01-09', '731 Foundekskjb', 'M', 3000, 333445555, 5
);

select * from employee;

>>>>>>> insert into employee ('Fname', 'Minit', 'Lname', 'Ssn', 'Bdate', 'Address', 'Sex', 'Salary', 'Super_ssn', 'Dno') values (Real values) <<<<<<

insert into employee (Fname, Lname, Ssn, Dno) values ('Supriya', 'Karkera', '111111111', '5');
select * from employee;

insert into employee (Fname, Lname, Ssn) values ('Saniya', 'Karkera', '222222222');

>>> mysqldump -u root company > C:\Users\Default\Desktop\company.sql




--------------------------------------------------------
DATE: 21/6/22
--------------------------------------------------------

use company;
show tables;

drop company;


create table department(
Dno varchar(20) primary key,
Dname varchar(20),
Mgrstartdate date
);

------------------------------------------

create database classic;

use classic;

source E:\PythonTraining\pythonFullstack\SQL\classicmodels.sql

show tables;
desc customers;
desc employees;
desc offices;
desc orderdetails;
desc orders;
desc payments;
desc productlines;
desc products;


------------------------------------------------

primary key (store_id, product_id ),
foreign key (product_id) references products(product_id)

-------------------------------------------------


******** QUERIES ***********


1. List all the records in payments table. * means all. so it will select all the cols from specified table(here, payments):
>> select * from payments;


2. 20 records from payments; when we need only limited amount of data. here, only first >>> 20 records will be shown as the limit is set to 20:  
>> select * from payments limit 20;


3. 2 cols with limit 10. Now we don't need all the cols, so we mention the cols that we >>> need, here, >>> customerNumber & amount from the table payments also, we want limited data, first 10 records from the specified >>> two cols
>> select customerNumber, amount from payments limit 10;

4. Display all the values for checkNumber from payments table. 
(not case sensitive, therefore, it both will give us the desired result ):
>> select checkNumber from payments
OR
>> select checknumber from payments;

-----------------------------------------

*** SORT: ORDER BY Clause ***

5. Display all the values for checkNumber in payments table. Sort the results by checkNumber. (Order the entire output by checkNumber):
>> select checkNumber from payments order by checkNumber;

(after limiting it):
>> select checkNumber from payments order by checkNumber limit 20;

(showing all columns but order by checkNumber)
(by default we get the sorted values in ascending order):
>> select * from payments order by checkNumber;

(now we do for descending order):
>> select checkNumber from payments order by checkNumber desc limit 20;
 

(oldest date first) - ASC:
>> select paymentdate from payments order by paymentdate limit 10;

(latest/earliest date first) - DESC:
>> select paymentdate from payments order by payments desc limit 20;

----------------------------------------------------------------

***** ALIASING & MIN() ******

6. Display the smallest amount value in the payments table. Label the result "Smallest Payment".
>> select min(amount) as "Smallest Amount" from payments;

***** ALIASING & MAX() ******
>> select max(amount) as "Smallest Amount" from payments;
 
----------------------------------------------------------------

***** UNIQUE values / DISTINCT keyword ******

7. Display a list of unique customerNumber values in the payments table.
>> select distinct customerNumber from payments;
OR
>> select distinct(customerNumber) as "Unique Customers" from payments;

----------------------------------------------------------------

******  GROUP BY clause: SUM() & AVG() ********

8. Display the customerNumber & total payment amount assigned to that customerNumber in the payments table.

(this won't give desired result):
>> select customerNumber, sum(amount) from payments;

(using group by, it will group the customerNumber, say 103, add all the amounts having custNo. 103 and record it's sum beside it)
(sum):
>> select customerNumber, sum(amount) from payments group by customerNumber limit 25;
OR
>> select customerNumber, sum(amount) as "Total Amount" from payments group by customerNumber limit 25;


(average)
>> select customerNumber, avg(amount) as "Average Amount" from payments group by customerNumber limit 5;
-------------------------------------------------------------

*********** COUNT() ************

9. 
How much is the count? 
count(<col name>): gives the count of records present in the mentioned column
count(*): gives the count of total rows in the table entirely

>> select count(*) as "Total rows" from payments;
>> select count(customerNumber) from payments;

(select the count of distinct customers):
>> select count(distinct(customerNumber)) from payments;
OR
>> select count(distinct customerNumber) from payments;

------------------------------------------------------------------

*********** WHERE clause ***********

10. Display the customerNumber values for those customerNumber in the payments table that values less than 2000.

>> select customerNumber from payments where customerNumber<200;

(getting count)
>> select count(customerNumber) from payments where customerNumber<200;

(distinct)
>> select distinct customerNumber from payments where customerNumber>200;
(count of distinct)
>> select count(distinct customerNumber) from payments where customerNumber>200;

----------------------------------------------------------------

************ BETWEEN keyword *******************

11. display paymentDate values for those records in the payments table in which the payments date is between 12/31/2003 and 12/31/2004.

(firstly, check the date format)
select * from payments limit 10;

(default date format: yyyy-mm-dd)
>> select paymentDate from payments where paymentDate between '2003-12-31' and '2004-12-31';

(count)
>> select count(paymentDate) as "Total payments between 2003-2004" from payments where paymentDate between '2003-12-31' and '2004-12-31';

(customerNumber between 100-200):
>> select count(customerNumber) from payments where customerNumber between 100 and 200;

-----------------------------------------------------------

******** NESTED QUERY *********

12. Display the amount values for those records in the payments table in which the amount is less than the average amount in payments table. Also sort it in ascending order wrt amount.

(we cannot directly use avg() in this case; below query is incorrect):
>> select amount from payments having amount<avg(amount) order by amount;

(query for getting avg):
>> select avg(amount) from payments;

(therefore, correct query - NESTED):
>> select amount from payments having amount < (select avg(amount) from payments) order by amount desc limit 10;

----------------------------------------------------

********** ALIASING *************

13. Display the customerName, paymentDate & amount from the payments & customers tables.

(2 tables are involved: customers & payments)
(from customers we need: customerName)
(from payments we need: paymentDate & amount)
(common in both tables is: customerNumber)
(this customerNumber is primary key in customers table & foreign key in payments table)
(therefore, we take customers table as main table and join it with payments on the basis of customerNumber)

>> select c.customerName, p.paymentDate, p.amount from customers c join payments p on p.customerNumber=c.customerNumber;

OR

>> select c.customerName, p.paymentDate, p.amount from customers c join payments p on p.customerNumber=c.customerNumber order by c.customerName;

OR

>> select customers.customerName, payments.paymentDate, payments.amount from customers join payments on payments.customerNumber=customers.customerNumber order by customers.customerName;

--------------------------------------

11. Display the customerName, phone & lastest paymentDate for each customer in payments & customers. Label the latest paymentDate as Last Payment Date.

(basic query):
>> select c.customerName, c.phone, p.paymentDate from customers c join payments p on p.customerNumber = c.customerNumber;

(max/latest date):
>> select max(paymentDate) from payments;

(answer):
>> select c.customerName, c.phone, (select max(paymentDate) from payments) as "Last Payment Date" from customers c join payments p on p.customerNumber = c.customerNumber group by c.customerName;

>> select c.customerName, c.phone, max(p.paymentDate) as "Last Payment Date" from customers c join payments p on p.customerNumber = c.customerNumber group by c.customerName;

--------------------------------------------------------------

********* HOW TO CHECK EXACT QUERY WRITTEN TO CREATE TABLE ****************

SYNTAX:--> show create table <table_name>; 

QUERY:>> show create table offices;
      >> show create table orders;

------------------------------------------------------------------

12. display country from customers table & their respective count

>> select country, count(country) as "Country Count" from customers group by country;
OR
>> select country, count(*) as "Country Count" from customers group by country;

(creditLimit):
>> select creaditLimit, count(*) from customers group by country;

------------------------------------------------------------------

13. Display a list of country values in the customers table along with the number of payments for each country.
(meaning: country & how many payments were made from that particular country)

>> select c.country, count(p.checkNumber) as "Payments Made" from customers c join payments p on p.customerNumber=c.customerNumber group by c.country;

-------------------------------------------------------------------

14. display the customerName, orderNumber & orderDate from the customers & orders tables.

>> select c.customerName, o.orderNumber,o.orderDate from customers c join orders o on o.customerNumber = c.customerNumber;

>> select c.customerName, c.customerNumber, o.orderNumber,o.orderDate from customers c join orders o on o.customerNumber = c.customerNumber;

----------------------------------------------------------------------

15. 
    i.   display the orderNumber, orderDate & value of each order from orders & orderDetails table.
    ii.  The value of each order is calculated by multiplying quantityOrdered with priceEach.
    iii. Label the calculated column as Order Value.

>> 